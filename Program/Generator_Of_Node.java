//This class generates a new node using an input as its starting point.
public class Generator_Of_Node {
    int[][]data = new int[4][6];


    Generator_Of_Node(int[][] data2, int numberOfTurns){
        data = GEN(numberOfTurns, data2);
    }


    public int[][] getData() {
        return data;
    }


//This method uses the input provided as a 2d array and creats a new array out of that.
//number of turns, is how complicated you wish to make your pyraminx or tetraminx.
    private int[][] GEN(int numberOfTurns, int[][] given_node) {
        int[][] newData = new int[given_node.length][given_node[0].length];

        for (int i = 0; i < given_node.length; i++) {
            newData[i] = given_node[i].clone();
        }


        for (int i = 0; i < numberOfTurns; i++) {
            int[] side_one = newData[0];
            int[] side_two = newData[1];
            int[] side_three = newData[2];
            int[] side_four = newData[3];

            int randomNumber = (int) (Math.random() * 8);
            int[][] forgotten = new int[4][];

            //generated by ChatGPT
            for (int k = 0; k < 4; k++) {
                forgotten[k] = newData[k].clone();
            }
            //generated by ChatGPT

            //This will let you know which turns the method is doing
            //System.out.println(randomNumber);
            switch (randomNumber) {
                
                //Top gains side 2 (<<< rotation)
                case 0:
                    for (int j = 0; j < 3; j++) {
                        forgotten[0][j] = side_two[j];
                        forgotten[1][j] = side_three[j];
                        forgotten[2][j] = side_one[j];
                    }
                    break;


                //Top gains side 3 (>>> rotation)
                case 1:
                    for (int j = 0; j < 3; j++) {
                        forgotten[0][j] = side_three[j];
                        forgotten[1][j] = side_one[j];
                        forgotten[2][j] = side_two[j];
                    }
                    break;


                //Right side gains side 2 (<<< rotation)
                case 2:
                    for (int j = 0; j < 3; j++) {
                        if (j + 4 != 6) {
                            forgotten[0][j + 2] = side_two[j + 4];
                            forgotten[1][j + 4] = side_four[j];
                        } else {
                            forgotten[0][j + 2] = side_two[0];
                            forgotten[1][0] = side_four[j];
                        }
                        forgotten[3][j] = side_one[j + 2];
                    }
                    break;


                //Right side gains side 4(>>> rotation)
                case 3:
                    for (int j = 0; j < 3; j++) {
                        forgotten[0][j + 2] = side_four[j];
                        if (j + 4 != 6) {
                            forgotten[1][j + 4] = side_one[j + 2];
                            forgotten[3][j] = side_two[j + 4];
                        } else {
                            forgotten[1][0] = side_one[j + 2];
                            forgotten[3][j] = side_two[0];
                        }
                    }
                    break;


                //Left side gains side 3 (>>> rotation)
                case 4:
                    for (int j = 0; j < 3; j++) {
                        if (j + 4 != 6) {
                            forgotten[0][j + 4] = side_three[j + 2];
                            forgotten[2][j + 2] = side_four[j + 4];
                            forgotten[3][j + 4] = side_one[j + 4];
                        } else {
                            forgotten[0][0] = side_three[j + 2];
                            forgotten[2][j + 2] = side_four[0];
                            forgotten[3][0] = side_one[0];
                        }
                    }
                    break;


                //left side gains side 4 (<<< rotation)
                case 5:
                    for (int j = 0; j < 3; j++) {
                        if (j + 4 != 6) {
                            forgotten[0][j + 4] = side_four[j + 4];
                            forgotten[2][j + 2] = side_one[j + 4];
                            forgotten[3][j + 4] = side_three[j + 2];
                        } else {
                            forgotten[0][0] = side_four[0];
                            forgotten[2][j + 2] = side_one[0];
                            forgotten[3][0] = side_three[j + 2];
                        }
                    }
                    break;


                // back side >>> right turn
                case 6:
                
                    for (int j = 0; j < 3; j++) {
                        if (j + 4 != 6) {
                            forgotten[1][j + 2] = side_three[j + 4];
                            forgotten[2][j + 4] = side_four[j + 2];
                        } else {
                            forgotten[1][j + 2] = side_three[0];
                            forgotten[2][0] = side_four[j + 2];
                        }
                        forgotten[3][j + 2] = side_two[j + 2];
                    }
                    
                    break;


                // back side <<< left turn
                case 7:
                    for (int j = 0; j < 3; j++) {
                        if (j + 4 != 6) {
                            forgotten[3][j + 2] = side_three[j + 4];
                            forgotten[2][j + 4] = side_two[j + 2];
                        } else {
                            forgotten[3][j + 2] = side_three[0];
                            forgotten[2][0] = side_two[j + 2];
                        }
                        forgotten[1][j + 2] = side_four[j + 2];
                    }
                    break;
            }

            //this line take the newly made array(forgotten) and puts it into the 
            //array that will be the starting point (newData)
            newData = forgotten;
        }


        //This creates a handy output where you can see the array of integers that will be explored
        // example of output: {{0,0,3,1,1,2},{2,1,1,2,3,3},{2,2,2,3,3,3},{0,0,1,1,0,0}};
        String output = "{";
        for (int i = 0; i < newData.length; i++) {
            output+="{";
            for (int j = 0; j < newData[0].length; j++) {
                output += newData[i][j] + ",";
            }
            output = output.substring(0, output.length()-1);
            output+="},";
        }
        output = output.substring(0, output.length()-1);
        output+="};";
        System.out.println(output);


        return newData;
    }
}
//Author OlegKov33